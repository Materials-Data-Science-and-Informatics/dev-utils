[tool.poetry]
name = "dev-utils"
version = "0.1.0"
description = "Helper utilities for development, used from other repositories."
authors = ["Anton Pirogov <a.pirogov@fz-juelich.de>"]
license = "MIT"

readme = "README.md"
repository = "https://github.com/Materials-Data-Science-and-Informatics/dev-utils"
homepage = "https://github.com/Materials-Data-Science-and-Informatics/dev-utils"
documentation = "https://github.com/Materials-Data-Science-and-Informatics/dev-utils"

keywords = ["dev", "misc", "util"]
classifiers = [
    # (see https://pypi.org/classifiers/)
    "Operating System :: POSIX :: Linux",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
]

packages = [{include = "dev_utils", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
rdflib = "^6.3.2"
codemetapy = "^2.4.1"
typer = "^0.7.0"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.18.1"
pre-commit = "^3.1.1"
pytest = "^7.2.2"
pytest-cov = "^4.0.0"
hypothesis = "^6.68.2"
licensecheck = "^2023.1.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocstrings = {extras = ["python"], version = "^0.21.2"}
mkdocs-material = "^9.1.6"
mkdocs-gen-files = "^0.4.0"
mkdocs-literate-nav = "^0.6.0"
mkdocs-section-index = "^0.3.5"
mkdocs-macros-plugin = "^0.7.0"
markdown-include = "^0.8.1"
pymdown-extensions = "^9.11"
markdown-exec = {extras = ["ansi"], version = "^1.6.0"}
mkdocs-coverage = "^0.2.7"
mike = "^1.1.2"
anybadge = "^1.14.0"

[tool.poetry.scripts]
update-codemeta = 'dev_utils.update_codemeta:app'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# NOTE: You can run the following with "poetry poe TASK"
[tool.poe.tasks]
init-dev = { shell = "pre-commit install && poetry install" }
lint = "pre-commit run"  # pass --all-files to check everything
test = "pytest"  # pass --cov to also collect coverage info
docs = "mkdocs build"  # run this to generate local documentation
licensecheck = "licensecheck"  # run this when you add new deps

# Tool Configurations
# -------------------

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "--cov-report=term-missing:skip-covered"
filterwarnings = [
# Example:
# "ignore::DeprecationWarning:importlib_metadata.*"
]

[tool.coverage.run]
source = ["dev_utils"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
ignore = ["W503", "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
per-file-ignores = [
# Example:
# "__init__.py:F401",
]
max-line-length = 88
count = true

[tool.bandit]
exclude_dirs = ["tests"]

[tool.licensecheck]
using = "poetry"
fail_licenses = ["gpl"]
# format = "json"
